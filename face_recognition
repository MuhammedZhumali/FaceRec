#!/usr/bin/env python3
import os
import cv2
import pickle
import bcrypt
import face_recognition
import numpy as np

# === CONFIG ===
ENC_PATH      = "encodings.pickle"
IMAGE_PATH    = input("Path to test image (or leave empty to use webcam): ").strip()
THRESHOLD     = 0.6    # face_distance threshold

# === STEP 1: Load your encodings + salt ===
with open(ENC_PATH, "rb") as f:
    db = pickle.load(f)
all_encs     = db["encodings"]
all_hashes   = db["hashed_names"]
salt         = db["salt"]

# === STEP 2: Ask for your passport and filter embeddings ===
passport = input("Enter your passport ID (e.g. N000001): ").strip().encode()
target_hash = bcrypt.hashpw(passport, salt)

known_encs = [e for e,h in zip(all_encs, all_hashes) if h == target_hash]
if not known_encs:
    print(f"[ERROR] No embeddings found for passport {passport.decode()}")
    exit(1)

print(f"[INFO] Loaded {len(known_encs)} embeddings for {passport.decode()}")

# === STEP 3: Prepare frame source ===
use_webcam = (IMAGE_PATH == "")
if use_webcam:
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("[ERROR] Cannot open webcam")
        exit(1)
else:
    if not os.path.isfile(IMAGE_PATH):
        print(f"[ERROR] Image not found: {IMAGE_PATH}")
        exit(1)
    image = cv2.imread(IMAGE_PATH)
    if image is None:
        print(f"[ERROR] Failed to read image: {IMAGE_PATH}")
        exit(1)

print("[INFO] Starting recognition...  Press Ctrl+C to exit")

try:
    while True:
        if use_webcam:
            ret, frame = cap.read()
            if not ret:
                break
        else:
            frame = image.copy()

        # Detect & encode faces
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        boxes = face_recognition.face_locations(rgb, model="hog")
        encodings = face_recognition.face_encodings(rgb, boxes)

        for (top, right, bottom, left), enc in zip(boxes, encodings):
            # Compare to your embeddings
            dists = face_recognition.face_distance(known_encs, enc)
            best = np.min(dists) if len(dists)>0 else 1.0

            if best < THRESHOLD:
                label = f"MATCHED: {passport.decode()}"
                color = (0,255,0)
            else:
                label = "Unknown"
                color = (0,0,255)

            # Draw box + label
            cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
            cv2.rectangle(frame, (left, top-20), (right, top), color, cv2.FILLED)
            cv2.putText(frame, label, (left+5, top-5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 1)

        cv2.imshow("Recognition", frame)
        if not use_webcam:
            cv2.waitKey(0)
            break

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

finally:
    if use_webcam:
        cap.release()
    cv2.destroyAllWindows()