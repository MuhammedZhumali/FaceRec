#!/usr/bin/env python3
import cv2
import sys
import pickle
import bcrypt
import face_recognition
import numpy as np
import dlib
import RPi.GPIO as GPIO
import time
import tkinter as tk
from tkinter import simpledialog
from datetime import datetime

# === GUI prompt for passport ID ===
def ask_passport():
    root = tk.Tk()
    root.withdraw()
    p = simpledialog.askstring("Passport", "Enter your Passport ID:")
    root.destroy()
    return p

# === CONFIG ===
ENC_PATH      = "encodings.pickle"
THRESHOLD     = 0.4
DETECT_EVERY  = 3
CAM_WIDTH     = 640
CAM_HEIGHT    = 480

SERVO_PIN     = 22
OPEN_DC       = 15
CLOSED_DC     = 5
OPEN_DURATION = 5.0  # seconds gate stays open
DISPLAY_DURATION = 3.0  # duration to display matched frame
LOG_FILE      = "entry_log.txt"

GPIO.setmode(GPIO.BOARD)
GPIO.setup(SERVO_PIN, GPIO.OUT)
servo = GPIO.PWM(SERVO_PIN, 50)  # 50 Hz
servo.start(CLOSED_DC)

# === auto-detect camera ===
def find_camera():
    for i in range(5):
        cap = cv2.VideoCapture(i, cv2.CAP_V4L2)
        if cap.isOpened():
            return cap
        cap.release()
    sys.exit("[ERROR] No camera found on indices 0â€“4")

# === load face encodings ===
with open(ENC_PATH, "rb") as f:
    db = pickle.load(f)
all_encs, all_hashes, salt = db["encodings"], db["hashed_names"], db["salt"]

# === check last entry status ===
def check_last_status(passport):
    try:
        with open(LOG_FILE, "r") as log:
            lines = log.readlines()
            for line in reversed(lines):
                if passport in line:
                    return "entered" in line
    except FileNotFoundError:
        return False
    return False

# === initialize face detector ===
cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
cap = find_camera()
cap.set(cv2.CAP_PROP_FRAME_WIDTH, CAM_WIDTH)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, CAM_HEIGHT)

print("[INFO] Starting face recognition.")

try:
    while True:
        passport = ask_passport()
        if not passport:
            print("[INFO] Passport entry cancelled. Waiting for next user.")
            continue

        pw = passport.strip().encode()
        h = bcrypt.hashpw(pw, salt)
        known_encs = [e for e, hh in zip(all_encs, all_hashes) if hh == h]

        if not known_encs:
            print(f"[ERROR] No encodings found for {passport}")
            continue

        print(f"[INFO] Loaded encodings for {passport}")

        frame_count = 0
        open_gate = False

        start_time = time.time()
        while (time.time() - start_time) < 30:
            ret, frame = cap.read()
            if not ret:
                continue

            frame_count += 1
            rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            if frame_count % DETECT_EVERY == 1:
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                faces = cascade.detectMultiScale(gray, 1.1, 5, minSize=(60, 60))

                for (x, y, w, h) in faces:
                    top, right = y, x + w
                    bottom, left = y + h, x
                    encs = face_recognition.face_encodings(rgb, [(top, right, bottom, left)])
                    if not encs:
                        continue

                    dist = np.min(face_recognition.face_distance(known_encs, encs[0]))
                    recognized = dist < THRESHOLD

                    label, color = (f"MATCH {passport}", (0,255,0)) if recognized else ("UNKNOWN", (0,0,255))
                    cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
                    cv2.putText(frame, label, (left + 5, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 1)

                    if recognized:
                        matched_time = time.time()
                        while time.time() - matched_time < DISPLAY_DURATION:
                            ret, disp_frame = cap.read()
                            if ret:
                                cv2.rectangle(disp_frame, (left, top), (right, bottom), color, 2)
                                cv2.putText(disp_frame, label, (left + 5, top - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 1)
                                cv2.imshow("Face Recognition", disp_frame)
                                cv2.waitKey(1)

                        current_status = check_last_status(passport)
                        action = "exited" if current_status else "entered"

                        servo.ChangeDutyCycle(OPEN_DC)
                        print(f"[INFO] {passport} recognized. Gate opened ({action}).")
                        with open(LOG_FILE, "a") as log:
                            log.write(f"{datetime.now()}: {passport} {action}\n")
                        open_gate = True
                        break

                if open_gate:
                    break

            cv2.imshow("Face Recognition", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                sys.exit(0)

        if open_gate:
            time.sleep(OPEN_DURATION)
            servo.ChangeDutyCycle(CLOSED_DC)
            print(f"[INFO] Gate closed for {passport}.")
        else:
            print(f"[INFO] No recognition for {passport} within timeout.")

except KeyboardInterrupt:
    print("[INFO] Program terminated.")
finally:
    servo.ChangeDutyCycle(CLOSED_DC)
    time.sleep(0.5)
    servo.stop()
    GPIO.cleanup()
    cap.release()
    cv2.destroyAllWindows()
